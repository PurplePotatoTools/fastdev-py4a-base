# automatically generated by the FlatBuffers compiler, do not modify

# namespace: flatbuffers_py2java

import jni.flatbuffers as flatbuffers
from jni.flatbuffers.compat import import_numpy
np = import_numpy()

class FlatBuffersJavaTypeEnum(object):
    Ref = 0
    Bytes = 1
    String = 2
    Null = 3
    Byte = 4
    Short = 5
    Int = 6
    Long = 7
    Float = 8
    Double = 9
    Boolean = 10
    Char = 11
    Array = 12


class FlatBuffersRequestType(object):
    GetClass = 0
    NewObject = 1
    GetFieldObject = 2
    SetFieldObject = 3
    CallMethod = 4
    NewProxyObject = 5
    ProxyInvoke = 6
    DeleteObject = 7
    GetValue = 8


class FlatBuffersResponseType(object):
    Success = 0
    Error = 1
    ThreadOccupation = 2


class FlatBuffersJavaObject(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = FlatBuffersJavaObject()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsFlatBuffersJavaObject(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # FlatBuffersJavaObject
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # FlatBuffersJavaObject
    def Type(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # FlatBuffersJavaObject
    def RefValue(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # FlatBuffersJavaObject
    def BytesValue(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 1))
        return 0

    # FlatBuffersJavaObject
    def BytesValueAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint8Flags, o)
        return 0

    # FlatBuffersJavaObject
    def BytesValueLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # FlatBuffersJavaObject
    def BytesValueIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

    # FlatBuffersJavaObject
    def StringValue(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # FlatBuffersJavaObject
    def ByteValue(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # FlatBuffersJavaObject
    def ShortValue(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int16Flags, o + self._tab.Pos)
        return 0

    # FlatBuffersJavaObject
    def IntValue(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # FlatBuffersJavaObject
    def LongValue(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # FlatBuffersJavaObject
    def FloatValue(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # FlatBuffersJavaObject
    def DoubleValue(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # FlatBuffersJavaObject
    def BooleanValue(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # FlatBuffersJavaObject
    def ArrayValue(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = FlatBuffersJavaObject()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # FlatBuffersJavaObject
    def ArrayValueLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # FlatBuffersJavaObject
    def ArrayValueIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        return o == 0

def FlatBuffersJavaObjectStart(builder):
    builder.StartObject(12)

def FlatBuffersJavaObjectAddType(builder, type):
    builder.PrependInt8Slot(0, type, 0)

def FlatBuffersJavaObjectAddRefValue(builder, refValue):
    builder.PrependInt32Slot(1, refValue, 0)

def FlatBuffersJavaObjectAddBytesValue(builder, bytesValue):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(bytesValue), 0)

def FlatBuffersJavaObjectStartBytesValueVector(builder, numElems):
    return builder.StartVector(1, numElems, 1)

def FlatBuffersJavaObjectAddStringValue(builder, stringValue):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(stringValue), 0)

def FlatBuffersJavaObjectAddByteValue(builder, byteValue):
    builder.PrependInt8Slot(4, byteValue, 0)

def FlatBuffersJavaObjectAddShortValue(builder, shortValue):
    builder.PrependInt16Slot(5, shortValue, 0)

def FlatBuffersJavaObjectAddIntValue(builder, intValue):
    builder.PrependInt32Slot(6, intValue, 0)

def FlatBuffersJavaObjectAddLongValue(builder, longValue):
    builder.PrependInt64Slot(7, longValue, 0)

def FlatBuffersJavaObjectAddFloatValue(builder, floatValue):
    builder.PrependFloat32Slot(8, floatValue, 0.0)

def FlatBuffersJavaObjectAddDoubleValue(builder, doubleValue):
    builder.PrependFloat64Slot(9, doubleValue, 0.0)

def FlatBuffersJavaObjectAddBooleanValue(builder, booleanValue):
    builder.PrependBoolSlot(10, booleanValue, 0)

def FlatBuffersJavaObjectAddArrayValue(builder, arrayValue):
    builder.PrependUOffsetTRelativeSlot(11, flatbuffers.number_types.UOffsetTFlags.py_type(arrayValue), 0)

def FlatBuffersJavaObjectStartArrayValueVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def FlatBuffersJavaObjectEnd(builder):
    return builder.EndObject()



class FlatBuffersRequest(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = FlatBuffersRequest()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsFlatBuffersRequest(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # FlatBuffersRequest
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # FlatBuffersRequest
    def Type(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # FlatBuffersRequest
    def HashCode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # FlatBuffersRequest
    def ClassName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # FlatBuffersRequest
    def FieldName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # FlatBuffersRequest
    def MethodName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # FlatBuffersRequest
    def Args(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            obj = FlatBuffersJavaObject()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # FlatBuffersRequest
    def ArgsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # FlatBuffersRequest
    def ArgsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        return o == 0

def FlatBuffersRequestStart(builder):
    builder.StartObject(6)

def FlatBuffersRequestAddType(builder, type):
    builder.PrependInt8Slot(0, type, 0)

def FlatBuffersRequestAddHashCode(builder, hashCode):
    builder.PrependInt32Slot(1, hashCode, 0)

def FlatBuffersRequestAddClassName(builder, className):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(className), 0)

def FlatBuffersRequestAddFieldName(builder, fieldName):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(fieldName), 0)

def FlatBuffersRequestAddMethodName(builder, methodName):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(methodName), 0)

def FlatBuffersRequestAddArgs(builder, args):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(args), 0)

def FlatBuffersRequestStartArgsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def FlatBuffersRequestEnd(builder):
    return builder.EndObject()



class FlatBuffersResponse(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = FlatBuffersResponse()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsFlatBuffersResponse(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # FlatBuffersResponse
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # FlatBuffersResponse
    def Type(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # FlatBuffersResponse
    def Data(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            obj = FlatBuffersJavaObject()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # FlatBuffersResponse
    def Exception(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def FlatBuffersResponseStart(builder):
    builder.StartObject(3)

def FlatBuffersResponseAddType(builder, type):
    builder.PrependInt8Slot(0, type, 0)

def FlatBuffersResponseAddData(builder, data):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(data), 0)

def FlatBuffersResponseAddException(builder, exception):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(exception), 0)

def FlatBuffersResponseEnd(builder):
    return builder.EndObject()



